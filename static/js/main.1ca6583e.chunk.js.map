{"version":3,"sources":["components/ViewComponent.js","components/DetailsComponent.js","api/ApiService.js","api/ApiUtils.js","api/PokemonService.js","components/HomeComponent.js","components/App.js","reportWebVitals.js","index.js"],"names":["Pokedex","pokemons","actPokemon","className","length","map","p","id","Card","onClick","CardActionArea","CardMedia","component","image","sprites","front_default","title","CardContent","Typography","gutterBottom","variant","name","toUpperCase","PokeItem","pokemon","color","types","t","idx","type","weight","height","httpRequest","method","url","request","headers","axios","data","then","res","result","response","status","statusText","error","Error","handleResponse","Promise","resolve","catch","err","Api","get","queryString","Object","keys","i","key","toString","getPokemon","a","ApiService","results","getData","getPokemonData","pokemonPromises","all","HomeComponent","useEffect","auxPokemon","slice","setPokeList","alert","useState","pokeList","pokemonSelected","setPokemonSelected","pokemonId","filter","Button","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1ca6583e.chunk.js","sourcesContent":["// ============================================================================\n// Componente que muestra un grid de cards de material UI\n// con la foto y nombre de 10 pokemon\n// guarda 20 resultados para hacer un cambio de vista\n// ============================================================================\nimport React from \"react\";\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport '../pokemon.css';\n\nfunction Pokedex({ pokemons, actPokemon }) {\n\n  // Dibuja los cards de pokemon encontrados\n  const drawPokemon = () => {\n    return pokemons.map((p, id) => (\n    <Card key = {id} onClick = {() => actPokemon(p.id)} className = 'card'>\n      <CardActionArea>\n        <CardMedia\n          component=\"img\"\n          image= {p.sprites.front_default}\n          title=\"Pokémon Image\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h6\" component=\"h6\">\n            {p.name.toUpperCase()}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n    ));\n  };\n\n  // Llama a la función de dibujo y los introduce en un div container\n  return <div className = 'pokedex'>\n            {pokemons.length > 0 && drawPokemon()}\n          </div>;\n}\n\nexport default Pokedex;","// ============================================================================\n// Componente que muestra los detalles de un item especifico\n// muestra un card de material UI con la imagen, nombre y\n// otros datos \n// ============================================================================\nimport React, { Component } from \"react\";\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport '../pokemon.css';\n\nfunction PokeItem({ pokemon }) {\n  return (\n    <Card className = 'cardSelected'>\n      <CardActionArea>\n        <CardMedia\n          component=\"img\"\n          image= {pokemon.sprites.front_default}\n          title=\"Pokémon Image\"\n        />\n        <CardContent>\n          <Typography gutterBottom variant=\"h5\" component=\"h2\">\n            {pokemon.name.toUpperCase()}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n          <p>Types:\n          {pokemon.types.length > 0 &&\n            pokemon.types.map((t, idx) => (\n              <li key={idx} className='type'>\n                {t.type.name}\n              </li>\n          ))}\n          </p>\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              Weight: {pokemon.weight}\n          </Typography>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n              Height: {pokemon.height}\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n    </Card>\n  );\n}\n\nexport default PokeItem;","// ============================================================================\n// ApiService.js utiliza métodos http para llamar a la API\n// ============================================================================\nimport axios from 'axios'; \nimport { handleResponse } from './ApiUtils';\n\n// ============================================================================\n// Se crea una solicitud http\n// ============================================================================\nconst httpRequest = (method, url, request, headers) => {\n  return axios({\n    method,\n    url,\n    data: request,\n    headers,\n  })\n    .then((res) => {\n      const result = handleResponse(res);\n      return Promise.resolve(result);\n    })\n    .catch((err) => {   return err; });\n};\n\n// ============================================================================\n// Obtiene la respuesta del servidor\n// ============================================================================\nconst get = (url, request, headers) => {\n  let queryString = '';\n  if (request && Object.keys(request).length > 0) {\n    queryString += '?';\n    let length = Object.keys(request).length, i = 0;\n\n    for (let key in request) {\n      i += 1;\n      queryString += `${key} = ${request[key].toString()}`;\n      if (length > i) queryString += '&';\n    }\n  }\n  return httpRequest('get', `${url}${queryString}`, request, headers);\n};\n\nconst Api = {\n  get,\n};\n\nexport default Api;","// ============================================================================\n// ApiUtils se encarga del manejo de respuestas del server\n// ============================================================================\n\n// ============================================================================\n// Funciones que se encargan de la respuesta del server\n// ============================================================================\nexport function handleResponse(response) {\n    if(\n        response.status === 200 ||  response.statusText === 'OK'    ||\n        response.status === 202 ||  response.statusText === 'Created'\n    )\n      return response.data;\n    if (response.status === 400) {\n        const error = response.statusText();\n        throw new Error(error);\n    }\n    throw new Error('Error de Red.');\n}","// ============================================================================\n// Pokemon Service llama a ApiService y ApiUtils para llamar a pokeapi\n// ============================================================================\nimport ApiService from './ApiService';\n\nexport const getPokemon = async () => {\n    try {\n        let response = await ApiService.get('https://pokeapi.co/api/v2/pokemon');\n    return response.results;\n    } catch (err) { throw err;  }\n};\n\nexport const getData = async (url) => {\n    try {\n        let response = await ApiService.get(url);\n    return response;\n    } catch (err) { throw err;  }\n};\n\n\nexport const getPokemonData = async () => {\n    try {\n      //Obtenemos una lista con todos los pokémon de la Api\n      let pokemons = await getPokemon();\n  \n      //Obtenemos los datos de cada pokémon\n      let pokemonPromises = pokemons.map((p) => getData(p.url));\n  \n      //La función devuelve toda la información\n      return await Promise.all(pokemonPromises);\n    } catch (err) { throw err;  }\n};","// ============================================================================\n// Componente que funciona como un routing/contenedor\n// del resto de componentes (detalles y lista)\n// ============================================================================\nimport React, { useEffect, useState } from \"react\";\nimport PokemonList from \"./ViewComponent\";\nimport PokemonDetail from \"./DetailsComponent\";\nimport { getPokemonData } from '../api/PokemonService';\nimport Button from '@material-ui/core/Button';\nimport '../pokemon.css';\n\nfunction HomeComponent() {\n  // Uso de un hook para llamar a la api cuando carga la app \n  useEffect(async () => {\n    try {\n      let pokemons = await getPokemonData(), auxPokemon = pokemons.slice(0,10);\n      setPokeList(auxPokemon);\n    } catch (err) {\n      alert(\"Error\");\n    }\n  }, []);\n\n  // Hooks de estado para cambiar la lista y el pokemon actual\n  const [pokeList, setPokeList] = useState([]);\n  const [pokemonSelected, setPokemonSelected] = useState(null);\n\n  // Selecciona un item especifico\n  const handleSelect = (pokemonId) => {\n    setPokemonSelected(pokeList.filter((p) => p.id === pokemonId)[0]); \n  };\n\n  // Retorna un contenedor con los otros componentes\n  return (\n    <div className = 'mainContainer'>\n      <div className = 'selected'>\n        {pokemonSelected && <PokemonDetail pokemon={pokemonSelected} />}\n      </div>\n      <div className = 'list'>\n        <PokemonList\n          pokemons = {pokeList}\n          actPokemon = {handleSelect}\n        />\n        <br></br>\n        <Button variant=\"contained\" color=\"secondary\" onClick = {async () => {\n          let pokemons = await getPokemonData(), auxPokemon = pokemons.slice(0,10);\n          setPokeList(auxPokemon);\n        }}>Anterior</Button>\n        <Button variant=\"contained\" color=\"secondary\" onClick = {async () => {\n          let pokemons = await getPokemonData(), auxPokemon = pokemons.slice(10,20);\n          setPokeList(auxPokemon);\n        }}>Siguiente</Button>\n      </div>\n    </div>\n  );    \n}\nexport default HomeComponent;","// ============================================================================\n// Funciona como router principal de la aplicación\n// llama al componente home que incluye los otros\n// dos componentes de funciones principales\n// ============================================================================\nimport './App.css';\nimport HomeComponent from '../components/HomeComponent';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <HomeComponent></HomeComponent>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}